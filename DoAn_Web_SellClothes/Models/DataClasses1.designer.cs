#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoAn_Web_SellClothes.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyBanQuanAo")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccountType(AccountType instance);
    partial void UpdateAccountType(AccountType instance);
    partial void DeleteAccountType(AccountType instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertInvoiceDetail(InvoiceDetail instance);
    partial void UpdateInvoiceDetail(InvoiceDetail instance);
    partial void DeleteInvoiceDetail(InvoiceDetail instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductType(ProductType instance);
    partial void UpdateProductType(ProductType instance);
    partial void DeleteProductType(ProductType instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QuanLyBanQuanAoConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AccountType> AccountTypes
		{
			get
			{
				return this.GetTable<AccountType>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this.GetTable<InvoiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<ProductType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAccount;
		
		private string _FullName;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private string _AddressUser;
		
		private string _PasswordUser;
		
		private int _StatusAccount;
		
		private int _IdAccountType;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<AccountType> _AccountType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAccountChanging(int value);
    partial void OnIdAccountChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressUserChanging(string value);
    partial void OnAddressUserChanged();
    partial void OnPasswordUserChanging(string value);
    partial void OnPasswordUserChanged();
    partial void OnStatusAccountChanging(int value);
    partial void OnStatusAccountChanged();
    partial void OnIdAccountTypeChanging(int value);
    partial void OnIdAccountTypeChanged();
    #endregion
		
		public Account()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._AccountType = default(EntityRef<AccountType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccount", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAccount
		{
			get
			{
				return this._IdAccount;
			}
			set
			{
				if ((this._IdAccount != value))
				{
					this.OnIdAccountChanging(value);
					this.SendPropertyChanging();
					this._IdAccount = value;
					this.SendPropertyChanged("IdAccount");
					this.OnIdAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressUser", DbType="NVarChar(50)")]
		public string AddressUser
		{
			get
			{
				return this._AddressUser;
			}
			set
			{
				if ((this._AddressUser != value))
				{
					this.OnAddressUserChanging(value);
					this.SendPropertyChanging();
					this._AddressUser = value;
					this.SendPropertyChanged("AddressUser");
					this.OnAddressUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordUser", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PasswordUser
		{
			get
			{
				return this._PasswordUser;
			}
			set
			{
				if ((this._PasswordUser != value))
				{
					this.OnPasswordUserChanging(value);
					this.SendPropertyChanging();
					this._PasswordUser = value;
					this.SendPropertyChanged("PasswordUser");
					this.OnPasswordUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusAccount", DbType="Int NOT NULL")]
		public int StatusAccount
		{
			get
			{
				return this._StatusAccount;
			}
			set
			{
				if ((this._StatusAccount != value))
				{
					this.OnStatusAccountChanging(value);
					this.SendPropertyChanging();
					this._StatusAccount = value;
					this.SendPropertyChanged("StatusAccount");
					this.OnStatusAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccountType", DbType="Int NOT NULL")]
		public int IdAccountType
		{
			get
			{
				return this._IdAccountType;
			}
			set
			{
				if ((this._IdAccountType != value))
				{
					if (this._AccountType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._IdAccountType = value;
					this.SendPropertyChanged("IdAccountType");
					this.OnIdAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Invoice", Storage="_Invoices", ThisKey="IdAccount", OtherKey="IdAccount")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_Account", Storage="_AccountType", ThisKey="IdAccountType", OtherKey="IdAccountType", IsForeignKey=true)]
		public AccountType AccountType
		{
			get
			{
				return this._AccountType.Entity;
			}
			set
			{
				AccountType previousValue = this._AccountType.Entity;
				if (((previousValue != value) 
							|| (this._AccountType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountType.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountType.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._IdAccountType = value.IdAccountType;
					}
					else
					{
						this._IdAccountType = default(int);
					}
					this.SendPropertyChanged("AccountType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountType")]
	public partial class AccountType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAccountType;
		
		private string _NameAccountType;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAccountTypeChanging(int value);
    partial void OnIdAccountTypeChanged();
    partial void OnNameAccountTypeChanging(string value);
    partial void OnNameAccountTypeChanged();
    #endregion
		
		public AccountType()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccountType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAccountType
		{
			get
			{
				return this._IdAccountType;
			}
			set
			{
				if ((this._IdAccountType != value))
				{
					this.OnIdAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._IdAccountType = value;
					this.SendPropertyChanged("IdAccountType");
					this.OnIdAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameAccountType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string NameAccountType
		{
			get
			{
				return this._NameAccountType;
			}
			set
			{
				if ((this._NameAccountType != value))
				{
					this.OnNameAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._NameAccountType = value;
					this.SendPropertyChanged("NameAccountType");
					this.OnNameAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_Account", Storage="_Accounts", ThisKey="IdAccountType", OtherKey="IdAccountType")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedback")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdFeedback;
		
		private string _FullNameUserFeedback;
		
		private string _PhoneNumberUserFeedback;
		
		private string _DescribeFeedback;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdFeedbackChanging(int value);
    partial void OnIdFeedbackChanged();
    partial void OnFullNameUserFeedbackChanging(string value);
    partial void OnFullNameUserFeedbackChanged();
    partial void OnPhoneNumberUserFeedbackChanging(string value);
    partial void OnPhoneNumberUserFeedbackChanged();
    partial void OnDescribeFeedbackChanging(string value);
    partial void OnDescribeFeedbackChanged();
    #endregion
		
		public Feedback()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFeedback", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdFeedback
		{
			get
			{
				return this._IdFeedback;
			}
			set
			{
				if ((this._IdFeedback != value))
				{
					this.OnIdFeedbackChanging(value);
					this.SendPropertyChanging();
					this._IdFeedback = value;
					this.SendPropertyChanged("IdFeedback");
					this.OnIdFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullNameUserFeedback", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullNameUserFeedback
		{
			get
			{
				return this._FullNameUserFeedback;
			}
			set
			{
				if ((this._FullNameUserFeedback != value))
				{
					this.OnFullNameUserFeedbackChanging(value);
					this.SendPropertyChanging();
					this._FullNameUserFeedback = value;
					this.SendPropertyChanged("FullNameUserFeedback");
					this.OnFullNameUserFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberUserFeedback", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumberUserFeedback
		{
			get
			{
				return this._PhoneNumberUserFeedback;
			}
			set
			{
				if ((this._PhoneNumberUserFeedback != value))
				{
					this.OnPhoneNumberUserFeedbackChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberUserFeedback = value;
					this.SendPropertyChanged("PhoneNumberUserFeedback");
					this.OnPhoneNumberUserFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescribeFeedback", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string DescribeFeedback
		{
			get
			{
				return this._DescribeFeedback;
			}
			set
			{
				if ((this._DescribeFeedback != value))
				{
					this.OnDescribeFeedbackChanging(value);
					this.SendPropertyChanging();
					this._DescribeFeedback = value;
					this.SendPropertyChanged("DescribeFeedback");
					this.OnDescribeFeedbackChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdInvoice;
		
		private System.DateTime _InvoiceDate;
		
		private int _TotalInvoice;
		
		private string _PaymentsInvoice;
		
		private int _StatusInvoice;
		
		private string _NoteInvoice;
		
		private int _IdAccount;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdInvoiceChanging(int value);
    partial void OnIdInvoiceChanged();
    partial void OnInvoiceDateChanging(System.DateTime value);
    partial void OnInvoiceDateChanged();
    partial void OnTotalInvoiceChanging(int value);
    partial void OnTotalInvoiceChanged();
    partial void OnPaymentsInvoiceChanging(string value);
    partial void OnPaymentsInvoiceChanged();
    partial void OnStatusInvoiceChanging(int value);
    partial void OnStatusInvoiceChanged();
    partial void OnNoteInvoiceChanging(string value);
    partial void OnNoteInvoiceChanged();
    partial void OnIdAccountChanging(int value);
    partial void OnIdAccountChanged();
    #endregion
		
		public Invoice()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdInvoice", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdInvoice
		{
			get
			{
				return this._IdInvoice;
			}
			set
			{
				if ((this._IdInvoice != value))
				{
					this.OnIdInvoiceChanging(value);
					this.SendPropertyChanging();
					this._IdInvoice = value;
					this.SendPropertyChanged("IdInvoice");
					this.OnIdInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="Date NOT NULL")]
		public System.DateTime InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalInvoice", DbType="Int NOT NULL")]
		public int TotalInvoice
		{
			get
			{
				return this._TotalInvoice;
			}
			set
			{
				if ((this._TotalInvoice != value))
				{
					this.OnTotalInvoiceChanging(value);
					this.SendPropertyChanging();
					this._TotalInvoice = value;
					this.SendPropertyChanged("TotalInvoice");
					this.OnTotalInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentsInvoice", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string PaymentsInvoice
		{
			get
			{
				return this._PaymentsInvoice;
			}
			set
			{
				if ((this._PaymentsInvoice != value))
				{
					this.OnPaymentsInvoiceChanging(value);
					this.SendPropertyChanging();
					this._PaymentsInvoice = value;
					this.SendPropertyChanged("PaymentsInvoice");
					this.OnPaymentsInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusInvoice", DbType="Int NOT NULL")]
		public int StatusInvoice
		{
			get
			{
				return this._StatusInvoice;
			}
			set
			{
				if ((this._StatusInvoice != value))
				{
					this.OnStatusInvoiceChanging(value);
					this.SendPropertyChanging();
					this._StatusInvoice = value;
					this.SendPropertyChanged("StatusInvoice");
					this.OnStatusInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteInvoice", DbType="NVarChar(500)")]
		public string NoteInvoice
		{
			get
			{
				return this._NoteInvoice;
			}
			set
			{
				if ((this._NoteInvoice != value))
				{
					this.OnNoteInvoiceChanging(value);
					this.SendPropertyChanging();
					this._NoteInvoice = value;
					this.SendPropertyChanged("NoteInvoice");
					this.OnNoteInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccount", DbType="Int NOT NULL")]
		public int IdAccount
		{
			get
			{
				return this._IdAccount;
			}
			set
			{
				if ((this._IdAccount != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAccountChanging(value);
					this.SendPropertyChanging();
					this._IdAccount = value;
					this.SendPropertyChanged("IdAccount");
					this.OnIdAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="IdInvoice", OtherKey="IdInvoice")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Invoice", Storage="_Account", ThisKey="IdAccount", OtherKey="IdAccount", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._IdAccount = value.IdAccount;
					}
					else
					{
						this._IdAccount = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceDetails")]
	public partial class InvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdInvoiceDetails;
		
		private int _IdInvoice;
		
		private int _IdProduct;
		
		private int _Quantity;
		
		private int _Price;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdInvoiceDetailsChanging(int value);
    partial void OnIdInvoiceDetailsChanged();
    partial void OnIdInvoiceChanging(int value);
    partial void OnIdInvoiceChanged();
    partial void OnIdProductChanging(int value);
    partial void OnIdProductChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public InvoiceDetail()
		{
			this._Invoice = default(EntityRef<Invoice>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdInvoiceDetails", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdInvoiceDetails
		{
			get
			{
				return this._IdInvoiceDetails;
			}
			set
			{
				if ((this._IdInvoiceDetails != value))
				{
					this.OnIdInvoiceDetailsChanging(value);
					this.SendPropertyChanging();
					this._IdInvoiceDetails = value;
					this.SendPropertyChanged("IdInvoiceDetails");
					this.OnIdInvoiceDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdInvoice", DbType="Int NOT NULL")]
		public int IdInvoice
		{
			get
			{
				return this._IdInvoice;
			}
			set
			{
				if ((this._IdInvoice != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdInvoiceChanging(value);
					this.SendPropertyChanging();
					this._IdInvoice = value;
					this.SendPropertyChanged("IdInvoice");
					this.OnIdInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", DbType="Int NOT NULL")]
		public int IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_Invoice", ThisKey="IdInvoice", OtherKey="IdInvoice", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._IdInvoice = value.IdInvoice;
					}
					else
					{
						this._IdInvoice = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceDetail", Storage="_Product", ThisKey="IdProduct", OtherKey="IdProduct", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._IdProduct = value.IdProduct;
					}
					else
					{
						this._IdProduct = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdProduct;
		
		private string _NameProduct;
		
		private int _PriceProduct;
		
		private string _SizeProduct;
		
		private string _ColorProduct;
		
		private string _ImageProduct;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private string _DescribeProduct;
		
		private System.Nullable<int> _QuantityProduct;
		
		private int _StatusProduct;
		
		private int _IdProductType;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdProductChanging(int value);
    partial void OnIdProductChanged();
    partial void OnNameProductChanging(string value);
    partial void OnNameProductChanged();
    partial void OnPriceProductChanging(int value);
    partial void OnPriceProductChanged();
    partial void OnSizeProductChanging(string value);
    partial void OnSizeProductChanged();
    partial void OnColorProductChanging(string value);
    partial void OnColorProductChanged();
    partial void OnImageProductChanging(string value);
    partial void OnImageProductChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnDescribeProductChanging(string value);
    partial void OnDescribeProductChanged();
    partial void OnQuantityProductChanging(System.Nullable<int> value);
    partial void OnQuantityProductChanged();
    partial void OnStatusProductChanging(int value);
    partial void OnStatusProductChanged();
    partial void OnIdProductTypeChanging(int value);
    partial void OnIdProductTypeChanged();
    #endregion
		
		public Product()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameProduct", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NameProduct
		{
			get
			{
				return this._NameProduct;
			}
			set
			{
				if ((this._NameProduct != value))
				{
					this.OnNameProductChanging(value);
					this.SendPropertyChanging();
					this._NameProduct = value;
					this.SendPropertyChanged("NameProduct");
					this.OnNameProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceProduct", DbType="Int NOT NULL")]
		public int PriceProduct
		{
			get
			{
				return this._PriceProduct;
			}
			set
			{
				if ((this._PriceProduct != value))
				{
					this.OnPriceProductChanging(value);
					this.SendPropertyChanging();
					this._PriceProduct = value;
					this.SendPropertyChanged("PriceProduct");
					this.OnPriceProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeProduct", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string SizeProduct
		{
			get
			{
				return this._SizeProduct;
			}
			set
			{
				if ((this._SizeProduct != value))
				{
					this.OnSizeProductChanging(value);
					this.SendPropertyChanging();
					this._SizeProduct = value;
					this.SendPropertyChanged("SizeProduct");
					this.OnSizeProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorProduct", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ColorProduct
		{
			get
			{
				return this._ColorProduct;
			}
			set
			{
				if ((this._ColorProduct != value))
				{
					this.OnColorProductChanging(value);
					this.SendPropertyChanging();
					this._ColorProduct = value;
					this.SendPropertyChanged("ColorProduct");
					this.OnColorProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageProduct", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ImageProduct
		{
			get
			{
				return this._ImageProduct;
			}
			set
			{
				if ((this._ImageProduct != value))
				{
					this.OnImageProductChanging(value);
					this.SendPropertyChanging();
					this._ImageProduct = value;
					this.SendPropertyChanged("ImageProduct");
					this.OnImageProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Date NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="Date NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescribeProduct", DbType="NVarChar(MAX)")]
		public string DescribeProduct
		{
			get
			{
				return this._DescribeProduct;
			}
			set
			{
				if ((this._DescribeProduct != value))
				{
					this.OnDescribeProductChanging(value);
					this.SendPropertyChanging();
					this._DescribeProduct = value;
					this.SendPropertyChanged("DescribeProduct");
					this.OnDescribeProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityProduct", DbType="Int")]
		public System.Nullable<int> QuantityProduct
		{
			get
			{
				return this._QuantityProduct;
			}
			set
			{
				if ((this._QuantityProduct != value))
				{
					this.OnQuantityProductChanging(value);
					this.SendPropertyChanging();
					this._QuantityProduct = value;
					this.SendPropertyChanged("QuantityProduct");
					this.OnQuantityProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusProduct", DbType="Int NOT NULL")]
		public int StatusProduct
		{
			get
			{
				return this._StatusProduct;
			}
			set
			{
				if ((this._StatusProduct != value))
				{
					this.OnStatusProductChanging(value);
					this.SendPropertyChanging();
					this._StatusProduct = value;
					this.SendPropertyChanged("StatusProduct");
					this.OnStatusProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProductType", DbType="Int NOT NULL")]
		public int IdProductType
		{
			get
			{
				return this._IdProductType;
			}
			set
			{
				if ((this._IdProductType != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductTypeChanging(value);
					this.SendPropertyChanging();
					this._IdProductType = value;
					this.SendPropertyChanged("IdProductType");
					this.OnIdProductTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="IdProduct", OtherKey="IdProduct")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_ProductType", ThisKey="IdProductType", OtherKey="IdProductType", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdProductType = value.IdProductType;
					}
					else
					{
						this._IdProductType = default(int);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductType")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdProductType;
		
		private string _NameProductType;
		
		private int _IdSex;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdProductTypeChanging(int value);
    partial void OnIdProductTypeChanged();
    partial void OnNameProductTypeChanging(string value);
    partial void OnNameProductTypeChanged();
    partial void OnIdSexChanging(int value);
    partial void OnIdSexChanged();
    #endregion
		
		public ProductType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProductType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdProductType
		{
			get
			{
				return this._IdProductType;
			}
			set
			{
				if ((this._IdProductType != value))
				{
					this.OnIdProductTypeChanging(value);
					this.SendPropertyChanging();
					this._IdProductType = value;
					this.SendPropertyChanged("IdProductType");
					this.OnIdProductTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameProductType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameProductType
		{
			get
			{
				return this._NameProductType;
			}
			set
			{
				if ((this._NameProductType != value))
				{
					this.OnNameProductTypeChanging(value);
					this.SendPropertyChanging();
					this._NameProductType = value;
					this.SendPropertyChanged("NameProductType");
					this.OnNameProductTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSex", DbType="Int NOT NULL")]
		public int IdSex
		{
			get
			{
				return this._IdSex;
			}
			set
			{
				if ((this._IdSex != value))
				{
					this.OnIdSexChanging(value);
					this.SendPropertyChanging();
					this._IdSex = value;
					this.SendPropertyChanged("IdSex");
					this.OnIdSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_Products", ThisKey="IdProductType", OtherKey="IdProductType")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
}
#pragma warning restore 1591
